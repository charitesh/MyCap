import sys
print('Python: ', sys.version)
import scipy
print('Scipy: ', scipy.__version__)
import numpy
print('Numpy: ', numpy.__version__)
import matplotlib
print('Matplotlib: ', matplotlib.__version__)
import pandas
print('Pandas: ', pandas.__version__)
import sklearn
print('Sklearn: ', sklearn.__version__)

from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier

url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['Sepal-Length', 'Sepal-Width', 'Petal-Length', 'Petal-width', 'Class']
dataset=pandas.read_csv(url, names = names)

#dataset dimensions
dataset.shape
#look at dataset
dataset.head(5)
#statistical summary
dataset.describe()
#class distribution
dataset.groupby('Class').size()

#univariate plot
dataset.plot(kind= 'box', subplots = True, layout = (2, 2), sharex = False ,sharey = False)
pyplot.show()

#histogrm of the variables
dataset.hist()
pyplot.show()

#multivariate plot
scatter_matrix(dataset)
pyplot.show()

#creating validation dataset
#splitting dataset
array = dataset.values
X = array[:, 0:4]
y = array[:, 4]
Xtrain, Xval, Ytrain, Yval = train_test_split(X, y, test_size = 0.2, random_state = 1)

#Logistic Regression
#Linear Discrimant Analysis
#K-N neighbors
#Classification and Regression Trees
#Gaussian Naive Bayes
#SVM

#building models
models = []
models.append(('LR', LogisticRegression(solver = 'liblinear', multi_class = 'ovr')))
models.append(("LDA", LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma = 'auto')))

#evaluating the models
results = []
names = []
for name, model in models:
    kfold = StratifiedKFold(n_splits = 10, random_state = 1)
    cv_results = cross_val_score(model, Xtrain, Ytrain, cv = kfold, scoring = 'accuracy')
    results.append(cv_results)
    names.append(name)
    print('%s: %f (%f)' %(name, cv_results.mean(), cv_results.std()))

#comparing models
pyplot.boxplot(results, labels = names)
pyplot.show()

#Making predictions on SVM
model = SVC(gamma = 'auto')
model.fit(Xtrain, Ytrain)
pred = model.predict(Xval)

#accuracy scores
print(accuracy_score(Yval, pred))
print(confusion_matrix(Yval, pred))
print(classification_report(Yval, pred))



